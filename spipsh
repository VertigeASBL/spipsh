#!/bin/bash
#
# Description : Contrôle SPIP à la ligne de commande. Doit être exécuté depuis
# la racine d'un site spip.
#
# Usage : spipsh [COMMAND]

set -euo pipefail

# Boîte à outils SPIP pour la ligne de commande.

# Complète spip-cli, en ce s'occupant des choses hors de sa portée, comme les
# permissions sur les dossiers.

# Les dossiers qui doivent exister pour que SPIP fonctionne sans embrouilles
SPIP_NEEDED_DIRS="config IMG local lib tmp plugins plugins/auto plugins/fabrique_auto squelettes"
# Les dossiers qui doivent être accessibles en écriture par Apache
SPIP_WRITEABLE_DIRS="config IMG local lib tmp plugins/auto plugins/fabrique_auto"

term_width=80
script_dir="$(dirname "$(readlink -f "$0")")"

# shellcheck source=lib/io.sh
. "$script_dir/lib/io.sh"
# shellcheck source=lib/wrappers.sh
. "$script_dir/lib/wrappers.sh"
# shellcheck source=lib/spip.sh
. "$script_dir/lib/spip.sh"

# commande par défaut
if [[ -z "${1+x}" ]]; then
    cmd="help";
fi

# pré-processing des arguments abrégés '-dat' -> '-d -a -t'
args=()
while [[ -n ${1+x} ]]; do
    if [[ "$1" =~ ^-[adtlc]+ ]]; then
        for (( i=0; i<${#1}; i++ )); do
            char=${1:$i:1}
            if [[ $char != '-' ]]; then
                args+=("-$char")
            fi
        done
    else
        args+=("$1")
    fi
    shift;
done
set -- "${args[@]}"

# parser et valider les arguments
spipsh_opts="";
while [[ -n "${1+x}" ]]; do
    if [[ ! "$1" =~ ^- ]]; then
        if [[ -z ${cmd+x} ]]; then
            cmd="$1";
        else
            case $cmd in
                db-query)
                    # utilisé par la commande db-query
                    # shellcheck disable=SC2034
                    db_query="$1";
                    ;;
                db-import)
                    # utilisé par la commande db-dump
                    # shellcheck disable=SC2034
                    db_dump="$1";
                    ;;
                run-script)
                    # utilisé par la commande run-script
                    # shellcheck disable=SC2034
                    script="$1";
                    ;;
            esac
        fi
    else
        spipsh_opts="$spipsh_opts $1";
        opt="$1"
        case $opt in
            -a | --all)
                # utilisé par la commande cc
                # shellcheck disable=SC2034
                all=1;
                ;;
            -d | --dry-run)
                dry_run=1;
                ;;
            -t | --tmp-dir)
                shift;
                if [[ -z "${1+x}" ]]; then
                    usage_error "L'option $opt nécessite un nom de dossier en argument."
                fi

                tmp_dir="$1";

                if [[ ! -d "$tmp_dir" ]]; then
                    usage_error "$tmp_dir n'est pas un répertoire."
                fi
                spipsh_opts="$spipsh_opts $1";
                ;;
            -l | --local-dir)
                shift;
                if [[ -z "${1+x}" ]]; then
                    usage_error "L'option $opt nécessite un nom de dossier en argument."
                fi

                local_dir="$1";

                if [[ ! -d "$local_dir" ]]; then
                    usage_error "$local_dir n'est pas un répertoire."
                fi
                spipsh_opts="$spipsh_opts $1";
                ;;
            -c | --connect)
                shift;
                if [[ -z "${1+x}" ]]; then
                    usage_error "L'option $opt nécessite un nom de fichier en argument."
                fi

                connect="$1";

                if [[ ! -f "config/${connect}.php" ]]; then
                    usage_error "config/${connect}.php n'est pas un fichier."
                fi
                spipsh_opts="$spipsh_opts $1";
                ;;
            *)
                usage_error "option invalide : $1"
                ;;
        esac
    fi
    shift;
done

if is_registered_command "$cmd" && [[ $( get_command_meta "$cmd" "env" ) == 'spip' ]]; then
    get_spip_env;
fi;

if [[ -f "${cmd_file:=${script_dir}/cmd/$cmd.sh}" ]]; then
    # shellcheck source=/dev/null
    . "$cmd_file"
else
    usage_error "$( printf "\

%s

Usage : %s

Commandes :

%s

Options :

  --all | -a               Permet de vider aussi le cache de vignettes. Valable
                           uniquement pour la commande cc.

  --dry-run | -d           Ne pas exécuter les commandes, seulement les afficher.

  --connect | -c STRING    Permet de choisir un fichier connect.php alternatif.

  --tmp-dir | -t STRING    Permet de choisir un répertoire tmp/ alternatif.

  --local-dir | -l STRING  Permet de choisir un répertoire local/ alternatif.
" \
"$(get_file_meta "${script_dir}/spipsh" "description" | fmt --width=${term_width})" \
"$(get_file_meta "${script_dir}/spipsh" "usage")" \
"$(get_commands_descriptions)" \
)"
fi
