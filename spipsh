#!/bin/bash
set -euo pipefail

# Boîte à outils SPIP pour la ligne de commande.

# Complète spip-cli, en ce s'occupant des choses hors de sa portée, comme les
# permissions sur les dossiers.

# Les dossiers qui doivent exister pour que SPIP fonctionne sans embrouilles
SPIP_NEEDED_DIRS="config IMG local lib tmp plugins plugins/auto plugins/fabrique_auto squelettes"
# Les dossiers qui doivent être accessibles en écriture par Apache
SPIP_WRITEABLE_DIRS="config IMG local lib tmp plugins/auto plugins/fabrique_auto"

usage_error () {
    # texte en rouge
    echo "$(tput setaf 3)$1$(tput sgr 0)" 1>&2;
    exit 2;
}

fatal_error () {
    # texte en jaune
    echo "$(tput setaf 1)$1$(tput sgr 0)" 1>&2;
    exit 1;
}

do_and_tell () {
    # la description en vert s'il y en a une
    if [[ -n "$1" ]]; then
        echo "$(tput setaf 2)# $1$(tput sgr 0)"
    fi
    shift
    # la commande en bleu
    echo "$(tput setaf 4)> $*$(tput sgr 0)"
    # exécuter la commande
    eval "$*"
}

check_program () {
    if [[ ! -x $(which "$1") ]]; then
        fatal_error "Le programme $1 n'est pas installé.";
    fi
}

ssh_do () {
    check_program "ssh";

    ssh "$ssh_user"@"$prod_host" "$1"
}

remove_some_warnings() {

    grep --no-messages --invert-match 'Using a password on the command line interface can be insecure.';
}

# une version de la commande mysql qui ne fait pas de warnings quand on passe le
# mot de passe en option.
mysql_quiet () {
    check_program "mysql";

    mysql "$@" 2> >(remove_some_warnings >&2);
}

# une version de zcat qui sait aussi lire le fichier non-compressés.
zcat_or_cat () {
    ( zcat "$1" 2> /dev/null || cat "$1" )
}


get_spip_root () {

    spip_root='';

    cwd=$( pwd );
    while [[ $( pwd ) != '/' ]]; do
        if [[ -f 'ecrire/inc_version.php' ]]; then
            spip_root=$( pwd );
            break;
        fi
        cd ..;
    done;
    cd "$cwd";

    if [[ -z "$spip_root" ]]; then
        fatal_error "ecrire/inc_version.php introuvable. Ce script doit être exécuté dans l'arborescence d'un site SPIP."
    fi;

    echo "$spip_root";
}

get_env () {

    spip_root=$( get_spip_root );

    # On se place à la racine du SPIP si c'est possible, on annule tout sinon.
    if [[ -z "$spip_root" ]]; then
        exit 1;
    else
        cd "$spip_root" || exit 1;
    fi;

    # charger des variables d'environnement dans un fichier .env
    if [ -r .env ]; then
        source .env
    elif [ -r .env.gpg ]; then
        eval "$(gpg -d .env.gpg 2> /dev/null)"
    fi

    # charger les accès à la DB depuis config/connect.php
    if [[ -f "config/connect.php" ]]; then

        IFS=',' read -r db_host db_port db_user db_pwd db_name _ db_prefix _ <<< \
             $( grep spip_connect_db config/connect.php\
                    | sed 's/^spip_connect_db(//'\
                    | sed -E "s/[^']*'([^']*)'?/\1,/g"\
                    | sed "s/);//"\
                    | head --lines=1 );

        if [[ -z "$db_port" ]]; then
            db_port=3306; # use default
        fi;
    else
        fatal_error "Le fichier config/connect.php n'existe pas, est-ce que ce SPIP est bien installé ?";
    fi

    # charger les accès au ftp de prod depuis la config de git
    if [[ -z ${ftp_user+x} ]]; then
        ftp_user="$( git config --get git-ftp.user || echo '' )";
    fi;
    if [[ -z ${ftp_pwd+x} ]]; then
        ftp_pwd="$( git config --get git-ftp.password || echo '' )";
    fi;
    if [[ -z ${ftp_url+x} ]]; then
        ftp_url="$( git config --get git-ftp.url || echo '' )";
    fi;
}


cmd=${1:-help};


# charger le contexte si nécessaire
env_commands=(
    'init'
    'cc'
    # 'get_loader' # don't load the env for this command
    'get_ecran_secu'
    'db-query'
    'db-import'
    'db-dump'
    'db-login'
    'run-script'
    'prod-db-dump'
    'prod-ssh'
    'prod-ftp'
    'prod-getimg'
    'prod-tramp'
);

for item in "${env_commands[@]}"; do
    if [[ $cmd == "$item" ]]; then
        get_env;
    fi;
done;


# exécuter la commande
case $cmd in

    init)
        for dir in $SPIP_NEEDED_DIRS; do
            if [[ ! -d $dir ]]; then
                do_and_tell "crée le dossier $dir"\
                            mkdir "$dir";
            fi
        done
        do_and_tell "répare les permissions"\
                    chmod -R a+rwX $SPIP_WRITEABLE_DIRS;
        ;;

    cc)
        do_and_tell "vide le cache"\
                    rm -rf tmp/{cache,plugin_xml_cache.gz,meta_cache.php,menu-rubriques-cache.txt} \&\&\
                    rm -rf local/{cache-css,cache-js}

        if [[ -n ${2+x} ]] && [[ $2 == "all" ]] ; then
            do_and_tell "vide le cache des vignettes"\
                        rm -rf local/*;
        fi
        ;;

    get_loader)
        check_program "wget"

        wget https://www.spip.net/spip-dev/INSTALL/spip_loader.php -O spip_loader.php
        ;;

    get_ecran_secu)
        check_program "wget"

        wget --output-document=config/ecran_securite.php https://zone.spip.org/trac/spip-zone/browser/_core_/securite/ecran_securite.php?format=txt
        ;;

    db-query)

        mysql_quiet --execute="${2}"\
                    --user "$db_user" --password="$db_pwd"\
                    --host="$db_host" --port="$db_port" "$db_name"
        ;;

    db-import)
        check_program "zcat"

        if [[ -z "$2" ]]; then
            usage_error "Vous devez spécifier un dump sql.gz à importer";
        else
            do_and_tell "vide la db"\
                        mysql_quiet --execute="\"DROP DATABASE $db_name; CREATE DATABASE $db_name;"\"\
                        --user "$db_user" --password='"$db_pwd"'\
                        --host="$db_host" --port="$db_port";
            do_and_tell "importe le dump..."\
                        zcat_or_cat "$2" \| mysql_quiet --user "$db_user" --password='"$db_pwd"'\
                        --host="$db_host" --port="$db_port" "$db_name";
        fi
        ;;

    db-dump)
        check_program "mysqldump"

        mysqldump --user "$db_user" --password="$db_pwd" --host="$db_host" --port="$db_port" "$db_name" \
            2> <(remove_some_warnings);
        ;;

    db-login)

        mysql_quiet --user "$db_user" --password="$db_pwd" --host="$db_host" --port="$db_port" "$db_name";
        ;;

    run-script)
        . "./bin/$2";
        ;;

    prod-db-dump)
        check_program "ssh";
        check_program "gzip";

        if [[ -z $prod_web_dir ]]; then
            prod_web_dir='public';
        fi;

        mkdir -p backup-db/prod

        now=$(date '+%F-%R');
        current_commit=$(ssh_do "cd $prod_web_dir && git log -1 --format='%H'");
        filename="backup-db/prod/$site_slug-prod-$now-$current_commit.sql.gz";

        do_and_tell "Importer la DB de production dans un dump local"\
                    ssh -C "$ssh_user"@"$prod_host"\
                    "\"mysqldump -h $db_prod_host -u $db_prod_user -p$db_prod_pass --add-drop-table $db_prod_name \
                     2> <(grep -v 'Using a password on the command line interface can be insecure.' >&2);\"" \
                    \| gzip \> "$filename";
        ;;

    prod-ssh)
        check_program "ssh";

        ssh "$ssh_user"@"$prod_host";
        ;;

    prod-ftp)
        check_program "lftp"

        lftp -u "$ftp_user","$ftp_pwd" "$ftp_url";
        ;;

    prod-getimg)
        check_program "lftp"

        do_and_tell "rapatrier les images et documents du serveur de production"\
                    lftp -u "$ftp_user",'"$ftp_pwd"' "$ftp_url" -e "mirror IMG/ ./IMG/ ; exit";
        ;;

    prod-tramp)
        check_program "emacs"

        emacsclient --eval "(find-file \"/ssh:$ssh_user@$prod_host:.\")"
        ;;
    *)
        usage_error "\

Contrôle SPIP à la ligne de commande. Doit être exécuté depuis la racine d'un site spip.

Usage : spipsh [COMMAND]

Commandes :
  cc              Vide les caches du dossier tmp, à la dure, sans passer par SPIP
  cc all          Vide les caches du dossier tmp, ainsi que le dossier local.
  init            Crée les dossiers de plugins et de libraires, puis donne les
                    permissions adequates.
  get_loader      Récupère la dernière version de spip_loader.php.
  get_ecran_secu  Récupère et installe la dernière version de l'écran de sécurité
  db-query        Exécute une commande MySQL.
  db-import       Importe un dump au format sql.gz dans la base de données MySQL.
  db-dump         Dump la db dans stdout.
  db-login        Ouvre une connexion à mysql dans le terminal
  run-script      Lance un script bash en lui passant les variables d'environnement
                    qui vont bien. On passe l'adresse du script relativement au
                    dossier bin/ situé à la racine du SPIP.
  prod-db-dump    Dump la db de production dans le dossier backup-db/prod/
  prod-ssh        Ouvre un shell sur le serveur de prod via ssh
  prod-ftp        Ouvre une connexion ftp vers le serveur via lftp.
  prod-getimg     Récupère le contenu du dossier IMG en production via lftp.
  prod-tramp      Ouvrir le dossier racine de la prod dans emacs.
";
        ;;
esac
