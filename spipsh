#!/bin/bash
set -euo pipefail

# Boîte à outils SPIP pour la ligne de commande.

# Complète spip-cli, en ce s'occupant des choses hors de sa portée, comme les
# permissions sur les dossiers.

# Les dossiers qui doivent exister pour que SPIP fonctionne sans embrouilles
SPIP_NEEDED_DIRS="config IMG local lib tmp plugins plugins/auto plugins/fabrique_auto squelettes"
# Les dossiers qui doivent être accessibles en écriture par Apache
SPIP_WRITEABLE_DIRS="config IMG local lib tmp plugins/auto plugins/fabrique_auto"

script_dir="$(dirname "$(readlink -f "$0")")"

# shellcheck source=lib/io.sh
. "$script_dir/lib/io.sh"
# shellcheck source=lib/wrappers.sh
. "$script_dir/lib/wrappers.sh"
# shellcheck source=lib/spip.sh
. "$script_dir/lib/spip.sh"

# commande par défaut
if [[ -z "${1+x}" ]]; then
    cmd="help";
fi

# pré-processing des arguments abrégés '-dat' -> '-d -a -t'
args=()
while [[ -n ${1+x} ]]; do
    if [[ "$1" =~ ^-[adtlc]+ ]]; then
        for (( i=0; i<${#1}; i++ )); do
            char=${1:$i:1}
            if [[ $char != '-' ]]; then
                args+=("-$char")
            fi
        done
    else
        args+=("$1")
    fi
    shift;
done
set -- "${args[@]}"

# parser et valider les arguments
spipsh_opts="";
while [[ -n "${1+x}" ]]; do
    if [[ ! "$1" =~ ^- ]]; then
        if [[ -z ${cmd+x} ]]; then
            cmd="$1";
        else
            case $cmd in
                db-query)
                    db_query="$1";
                    ;;
                db-import)
                    db_dump="$1";
                    ;;
                run-script)
                    script="$1";
                    ;;
            esac
        fi
    else
        spipsh_opts="$spipsh_opts $1";
        opt="$1"
        case $opt in
            -a | --all)
                all=1;
                ;;
            -d | --dry-run)
                dry_run=1;
                ;;
            -t | --tmp-dir)
                shift;
                if [[ -z "${1+x}" ]]; then
                    usage_error "L'option $opt nécessite un nom de dossier en argument."
                fi

                tmp_dir="$1";

                if [[ ! -d "$tmp_dir" ]]; then
                    usage_error "$tmp_dir n'est pas un répertoire."
                fi
                spipsh_opts="$spipsh_opts $1";
                ;;
            -l | --local-dir)
                shift;
                if [[ -z "${1+x}" ]]; then
                    usage_error "L'option $opt nécessite un nom de dossier en argument."
                fi

                local_dir="$1";

                if [[ ! -d "$local_dir" ]]; then
                    usage_error "$local_dir n'est pas un répertoire."
                fi
                spipsh_opts="$spipsh_opts $1";
                ;;
            -c | --connect)
                shift;
                if [[ -z "${1+x}" ]]; then
                    usage_error "L'option $opt nécessite un nom de fichier en argument."
                fi

                connect="$1";

                if [[ ! -f "config/${connect}.php" ]]; then
                    usage_error "config/${connect}.php n'est pas un fichier."
                fi
                spipsh_opts="$spipsh_opts $1";
                ;;
            *)
                usage_error "option invalide : $1"
                ;;
        esac
    fi
    shift;
done

# charger le contexte si nécessaire
env_commands=(
    'init'
    'cc'
    # 'get_loader' # don't load the env for this command
    'get_ecran_secu'
    'db-query'
    'db-import'
    'db-dump'
    'db-login'
    'run-script'
    'prod-db-dump'
    'prod-ssh'
    'prod-ftp'
    'prod-getimg'
    'prod-tramp'
);

for item in "${env_commands[@]}"; do
    if [[ $cmd == "$item" ]]; then
        get_env;
    fi;
done;


# exécuter la commande
case $cmd in

    init)
        for dir in $SPIP_NEEDED_DIRS; do
            if [[ ! -d $dir ]]; then
                do_and_tell "crée le dossier $dir"\
                            mkdir "$dir";
            fi
        done
        do_and_tell "répare les permissions"\
                    chmod -R a+rwX $SPIP_WRITEABLE_DIRS;
        ;;

    cc)
        do_and_tell "vide le cache"\
                    rm -rf ${tmp_dir:-tmp}/{cache,plugin_xml_cache.gz,meta_cache.php,menu-rubriques-cache.txt} \&\&\
                    rm -rf ${local_dir:-local}/{cache-css,cache-js}

        if [[ -n ${all+x} ]] ; then
            do_and_tell "vide le cache des vignettes"\
                        rm -rf ${local_dir:-local}/*;
        fi
        ;;

    get_loader)
        check_program "wget"

        wget https://www.spip.net/spip-dev/INSTALL/spip_loader.php -O spip_loader.php
        ;;

    get_ecran_secu)
        check_program "wget"

        wget --output-document=config/ecran_securite.php https://zone.spip.org/trac/spip-zone/browser/_core_/securite/ecran_securite.php?format=txt
        ;;

    db-query)
        if [[ -z "${db_query+x}" ]]; then
            usage_error "Vous devez spécifier une commande à exécuter.";
        fi

        mysql_quiet --execute="$db_query"\
                    --user "$db_user" --password="$db_pwd"\
                    --host="$db_host" --port="$db_port" "$db_name"
        ;;

    db-import)
        check_program "zcat"

        if [[ -z "${db_dump+x}" ]]; then
            usage_error "Vous devez spécifier un dump sql.gz à importer";
        else
            do_and_tell "vide la db"\
                        mysql_quiet --execute="\"DROP DATABASE $db_name; CREATE DATABASE $db_name;"\"\
                        --user "$db_user" --password='"$db_pwd"'\
                        --host="$db_host" --port="$db_port";
            do_and_tell "importe le dump..."\
                        zcat_or_cat "$db_dump" \| mysql_quiet --user "$db_user" --password='"$db_pwd"'\
                        --host="$db_host" --port="$db_port" "$db_name";
        fi
        ;;

    db-dump)
        check_program "mysqldump"

        mysqldump --user "$db_user" --password="$db_pwd" --host="$db_host" --port="$db_port" "$db_name" \
            2> <(remove_some_warnings);
        ;;

    db-login)

        mysql_quiet --user "$db_user" --password="$db_pwd" --host="$db_host" --port="$db_port" "$db_name";
        ;;

    run-script)
        if [[ -z "${script+x}" ]]; then
            usage_error "Vous devez spécifier le nom d'un script.";
        else
            . "./bin/$script";
        fi
        ;;

    prod-db-dump)
        check_program "ssh";
        check_program "gzip";

        if [[ -z $prod_web_dir ]]; then
            prod_web_dir='public';
        fi;

        mkdir -p backup-db/prod

        now=$(date '+%F-%R');
        current_commit=$(ssh_do "cd $prod_web_dir && git log -1 --format='%H'");
        filename="backup-db/prod/$site_slug-prod-$now-$current_commit.sql.gz";

        do_and_tell "Importer la DB de production dans un dump local"\
                    ssh -C "$ssh_user"@"$prod_host"\
                    '"mysqldump -h' "$db_prod_host" '-u' "$db_prod_user" '-p$db_prod_pass --add-drop-table' "$db_prod_name" \
                    '2> <(grep -v \"Using a password on the command line interface can be insecure.\" >&2);"' \
                    \| gzip \> "$filename";
        ;;

    prod-ssh)
        check_program "ssh";

        ssh "$ssh_user"@"$prod_host";
        ;;

    prod-ftp)
        check_program "lftp"

        lftp -u "$ftp_user","$ftp_pwd" "$ftp_url";
        ;;

    prod-getimg)
        check_program "lftp"

        do_and_tell "rapatrier les images et documents du serveur de production"\
                    lftp -u "$ftp_user",'"$ftp_pwd"' "$ftp_url" -e "mirror IMG/ ./IMG/ ; exit";
        ;;

    prod-tramp)
        check_program "emacs"

        emacsclient --eval "(find-file \"/ssh:$ssh_user@$prod_host:.\")"
        ;;
    *)
        usage_error "\

Contrôle SPIP à la ligne de commande. Doit être exécuté depuis la racine d'un site spip.

Usage : spipsh [COMMAND]

Commandes :

  cc              Vide les caches du dossier tmp, à la dure, sans passer par SPIP.
  init            Crée les dossiers de plugins et de libraires, puis donne les
                    permissions adequates.
  get_loader      Récupère la dernière version de spip_loader.php.
  get_ecran_secu  Récupère et installe la dernière version de l'écran de sécurité
  db-query        Exécute une commande MySQL.
  db-import       Importe un dump au format sql.gz dans la base de données MySQL.
  db-dump         Dump la db dans stdout.
  db-login        Ouvre une connexion à mysql dans le terminal
  run-script      Lance un script bash en lui passant les variables d'environnement
                    qui vont bien. On passe l'adresse du script relativement au
                    dossier bin/ situé à la racine du SPIP.
  prod-db-dump    Dump la db de production dans le dossier backup-db/prod/
  prod-ssh        Ouvre un shell sur le serveur de prod via ssh
  prod-ftp        Ouvre une connexion ftp vers le serveur via lftp.
  prod-getimg     Récupère le contenu du dossier IMG en production via lftp.
  prod-tramp      Ouvrir le dossier racine de la prod dans emacs.

Options :

  --all | -a               Permet de vider aussi le cache de vignettes. Valable
                           uniquement pour la commande cc.

  --dry-run | -d           Ne pas exécuter les commandes, seulement les afficher.

  --connect | -c STRING    Permet de choisir un fichier connect.php alternatif.

  --tmp-dir | -t STRING    Permet de choisir un répertoire tmp/ alternatif.

  --local-dir | -l STRING  Permet de choisir un répertoire local/ alternatif.
";
        ;;
esac
