#!/bin/bash

# Boîte à outils SPIP pour la ligne de commande.

# Complète spip-cli, en ce s'occupant des choses hors de sa portée, comme les
# permissions sur les dossiers.

# TODO dans l'idéal le script devrait aussi fonctionner quand on est dans un
#      sous-répertoire d'un spip. Il faudrait alors calculer le chemin de la
#      racine, puis l'utiliser à la place des (pwd) qu'on utilise actuellement.

# Les dossiers qui doivent exister pour que SPIP fonctionne sans embrouilles
SPIP_NEEDED_DIRS="config IMG local lib tmp plugins plugins/auto plugins/fabrique_auto squelettes"
# Les dossiers qui doivent être accessibles en écriture par Apache
SPIP_WRITEABLE_DIRS="config IMG local lib tmp plugins/auto plugins/fabrique_auto"

usage_error () {
    echo "$1" 1>&2;
    exit 2;
}

fatal_error () {
    echo "$1" 1>&2;
    exit 1;
}

check_env () {
    if [[ ! -f "ecrire/inc_version.php" ]]
    then
        usage_error "Ce script doit être exécuté depuis la racine d'un SPIP.";
    fi
}

parse_connect () {
    if [[ -f "config/connect.php" ]]
    then
        grep spip_connect_db config/connect.php\
            | sed -r "s/[^']*'([^']*)'/\1,/g" | sed "s/);//"\
            | awk "BEGIN { FS=\",\"; } { print $1 }";
    else
        fatal_error "Le fichier config/connect.php n'existe pas, est-ce que ce SPIP est bien installé ?";
    fi
}

get_spip_info () {

    case $1 in
        db_host)
            parse_connect "\$1";;
        db_port)
            port=$(parse_connect "\$2");
            if [[ -z "$port" ]]
            then
                echo 0; # use default
            else
                echo "$port";
            fi ;;
        db_user)
            parse_connect "\$3";;
        db_pwd)
            parse_connect "\$4";;
        db_name)
            parse_connect "\$5";;
        db_prefix)
            parse_connect "\$6";;
        ftp_user)
            git config --get git-ftp.user;;
        ftp_pwd)
            git config --get git-ftp.password;;
        ftp_url)
            git config --get git-ftp.url;;
        *)
            fatal_error "get_spip_info : paramètre invalide";;
    esac
}

check_env;

case $1 in

    init)
        for dir in $SPIP_NEEDED_DIRS
        do
            if [[ ! -d $dir ]]
            then
                echo "crée le dossier $dir";
                mkdir "$dir";
            fi
        done
        echo "répare les permissions";
        chmod a+rwX "$SPIP_WRITEABLE_DIRS";
        ;;
    cc)
        echo "vide le cache";
        rm -rf tmp/cache{,.php,.gz}

        if [[ $2 == "all" ]] ; then
            echo "vide le cache des vignettes";
            rm -rf local/*;
        fi
        ;;
    importdb)
        if [[ -z "$2" ]]
        then
            usage_error "Vous devez spécifier un dump sql.gz à importer";
        else
            echo "Importe le dump $2...";
            zcat "$2" | mysql --user "$(get_spip_info db_user)" --password="$(get_spip_info db_pwd)"\
                            --host="$(get_spip_info db_host)" --port="$(get_spip_info db_port)"\
                            "$(get_spip_info db_name)";
        fi
        ;;
    getimg)
        if [[ ! -x $(which lftp) ]]
        then
            fatal_error "Le programme lftp ne semble pas installé.";
        fi

        lftp -u "$(get_spip_info ftp_user)","$(get_spip_info ftp_pwd)"\
             "$(get_spip_info ftp_url)" -e "mirror IMG/ ./IMG/"
        ;;
   *)
        usage_error "Contrôle SPIP à la ligne de commande. Doit être executé
depuis la racine d'un site spip.

Usage : spipsh [COMMAND]

Commandes admises :
  cc         Vide les caches du dossier tmp, à la dure, sans passer par SPIP
  cc all     Vide les caches du dossier tmp, ainsi que le dossier
               local.
  init       Crée les dossiers de plugins et de libraires, puis
               donne les permissions adequates.
  importdb   Importe un dump au format sql.gz dans la base de données MySQL du SPIP.
  getimg     Récupère le contenu du dossier IMG en production via lftp.
";
        ;;
esac
