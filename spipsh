#!/bin/bash
set -euo pipefail

# Boîte à outils SPIP pour la ligne de commande.

# Complète spip-cli, en ce s'occupant des choses hors de sa portée, comme les
# permissions sur les dossiers.

# TODO dans l'idéal le script devrait aussi fonctionner quand on est dans un
#      sous-répertoire d'un spip. Il faudrait alors calculer le chemin de la
#      racine, puis l'utiliser à la place des (pwd) qu'on utilise actuellement.

# Les dossiers qui doivent exister pour que SPIP fonctionne sans embrouilles
SPIP_NEEDED_DIRS="config IMG local lib tmp plugins plugins/auto plugins/fabrique_auto squelettes"
# Les dossiers qui doivent être accessibles en écriture par Apache
SPIP_WRITEABLE_DIRS="config IMG local lib tmp plugins/auto plugins/fabrique_auto"

# charger des variables d'environnement dans un fichier .env
if [ -r .env ]
then
    source .env
elif [ -r .env.gpg ]
then
    eval "$(gpg -d .env.gpg 2> /dev/null)"
fi


usage_error () {
    echo "$1" 1>&2;
    exit 2;
}

fatal_error () {
    echo "$1" 1>&2;
    exit 1;
}

check_env () {
    if [[ ! -f "ecrire/inc_version.php" ]]
    then
        usage_error "Ce script doit être exécuté depuis la racine d'un SPIP.";
    fi
}

check_program () {
    if [[ ! -x $(which "$1") ]]
    then
        fatal_error "Le programme $1 n'est pas installé.";
    fi
}

parse_connect () {
    if [[ -f "config/connect.php" ]]
    then
        grep spip_connect_db config/connect.php\
            | sed -r "s/[^']*'([^']*)'/\1,/g" | sed "s/);//"\
            | head --lines=1\
            | awk "BEGIN { FS=\",\"; } { print $1 }";
    else
        fatal_error "Le fichier config/connect.php n'existe pas, est-ce que ce SPIP est bien installé ?";
    fi
}

get_spip_info () {

    case $1 in
        db_host)
            parse_connect "\$1";;
        db_port)
            port=$(parse_connect "\$2");
            if [[ -z "$port" ]]
            then
                echo 0; # use default
            else
                echo "$port";
            fi ;;
        db_user)
            parse_connect "\$3";;
        db_pwd)
            parse_connect "\$4";;
        db_name)
            parse_connect "\$5";;
        db_prefix)
            parse_connect "\$6";;
        ftp_user)
            git config --get git-ftp.user;;
        ftp_pwd)
            git config --get git-ftp.password;;
        ftp_url)
            git config --get git-ftp.url;;
        *)
            fatal_error "get_spip_info : paramètre invalide";;
    esac
}

case $1 in

    init)
        check_env;
        for dir in $SPIP_NEEDED_DIRS
        do
            if [[ ! -d $dir ]]
            then
                echo "crée le dossier $dir";
                mkdir "$dir";
            fi
        done
        echo "répare les permissions";
        chmod -R a+rwX $SPIP_WRITEABLE_DIRS;
        ;;
    cc)
        check_env;
        echo "vide le cache";
        rm -rf tmp/cache{,.php,.gz}

        if [[ $2 == "all" ]] ; then
            echo "vide le cache des vignettes";
            rm -rf local/*;
        fi
        ;;
    importdb)
        check_env;
        check_program "zcat"
        check_program "mysql"

        if [[ -z "$2" ]]
        then
            usage_error "Vous devez spécifier un dump sql.gz à importer";
        else
            echo "Vide la db...";
            echo "DROP DATABASE $(get_spip_info db_name); CREATE DATABASE $(get_spip_info db_name);"\
                | mysql --user "$(get_spip_info db_user)" --password="$(get_spip_info db_pwd)"\
                        --host="$(get_spip_info db_host)" --port="$(get_spip_info db_port)";
            echo "Importe le dump $2...";
            zcat "$2" | mysql --user "$(get_spip_info db_user)" --password="$(get_spip_info db_pwd)"\
                            --host="$(get_spip_info db_host)" --port="$(get_spip_info db_port)"\
                            "$(get_spip_info db_name)";
        fi
        ;;
    dumpdb)
        check_env;
        check_program "mysqldump"

        mysqldump --user "$(get_spip_info db_user)" --password="$(get_spip_info db_pwd)"\
                  --host="$(get_spip_info db_host)" --port="$(get_spip_info db_port)"\
                  "$(get_spip_info db_name)";
        ;;
    dump-prod-db)
        check_env;
        check_program "ssh";
        check_program "gzip";

        echo "Importer la DB depuis $prod_host vers un dump local"
        now=$(date '+%F-%R');
        # current_commit=$(ssh_do "cd public && git log -1 --format='%H'");
        mkdir -p backup-db/prod
        ssh -C "$ssh_user"@"$prod_host" \
            "mysqldump -u $db_prod_user -p$db_prod_pass --add-drop-table $db_prod_name" \
            | gzip > "backup-db/prod/magique-prod-$now.sql.gz"
        ;;
    mysql)
        check_env;
        check_program "mysql"

        mysql --user "$(get_spip_info db_user)" --password="$(get_spip_info db_pwd)"\
              --host="$(get_spip_info db_host)" --port="$(get_spip_info db_port)"\
              "$(get_spip_info db_name)";
        ;;
    ftp)
        check_env;
        check_program "lftp"

        lftp -u "$(get_spip_info ftp_user)","$(get_spip_info ftp_pwd)"\
             "$(get_spip_info ftp_url)";
        ;;
    getimg)
        check_program "lftp"

        lftp -u "$(get_spip_info ftp_user)","$(get_spip_info ftp_pwd)"\
             "$(get_spip_info ftp_url)" -e "mirror IMG/ ./IMG/ ; exit";
        ;;
    get_loader)
        check_program "wget"

        wget https://www.spip.net/spip-dev/INSTALL/spip_loader.php -O spip_loader.php
        ;;
    get_ecran_secu)
        check_program "wget"

        wget --output-document=config/ecran_securite.php https://zone.spip.org/trac/spip-zone/browser/_core_/securite/ecran_securite.php?format=txt
        ;;
   *)
        usage_error "Contrôle SPIP à la ligne de commande. Doit être executé
depuis la racine d'un site spip.

Usage : spipsh [COMMAND]

Commandes admises :
  cc              Vide les caches du dossier tmp, à la dure, sans passer par SPIP
  cc all          Vide les caches du dossier tmp, ainsi que le dossier local.
  init            Crée les dossiers de plugins et de libraires, puis donne
                    les permissions adequates.
  importdb        Importe un dump au format sql.gz dans la base de données MySQL
                    du SPIP.
  dumpdb          Dump la db dans stdout.
  mysql           Ouvre une connexion à mysql dans le terminal
  ftp             Ouvre une connexion ftp vers le serveur via lftp.
  getimg          Récupère le contenu du dossier IMG en production via lftp.
  get_loader      Récupère la dernière version de spip_loader.php.
  get_ecran_secu  Récupère et installe la dernière version de l'écran de sécurité
";
        ;;
esac
