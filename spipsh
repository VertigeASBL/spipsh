#!/bin/bash
#
# Description : Contrôle SPIP à la ligne de commande. Doit être exécuté depuis
# la racine d'un site spip.
#
# Usage : spipsh [COMMAND]
#
# Options :
#
# %% all
# desc="Permet de vider aussi le cache des vignettes. Valable uniquement pour la commande cc."
# short="a" variable="all" value="1" default=0
#
# %% dry-run
# desc="Ne pas exécuter les commandes, seulement les afficher."
# short="d" variable="dry_run" value=1 default=0
#
# %% connect
# desc="Permet de choisir un fichier connect.php alternatif."
# short="c" variable="connect" default="connect"
#
# %% tmp-dir
# desc="Permet de choisir un répertoire tmp/ alternatif."
# short="t" variable="tmp_dir" default="tmp"
#
# %% local-dir
# desc="Permet de choisir un répertoire local/ alternatif."
# short="l" variable="local_dir" default="local"
#
set -euo pipefail

# shellcheck source=vendor/bash-args/init_script.sh
. "$(dirname "$(readlink -f "$0")")"/vendor/bash-args/init_script.sh

# shellcheck source=lib/spip.sh
. "${SCRIPT_DIR}"/lib/spip.sh


# shellcheck disable=2154
if [[ ! -f "config/$connect.php" ]]; then
    out_usage_error "config/$connect.php n'est pas un fichier."
fi

# shellcheck disable=2154
if [[ ! -d "$tmp_dir" ]]; then
    out_usage_error "$tmp_dir n'est pas un dossier."
fi

# shellcheck disable=2154
if [[ ! -d "$local_dir" ]]; then
    out_usage_error "$local_dir n'est pas un dossier."
fi




# commande par défaut
if [[ -z "${CMD+x}" ]]; then
    CMD="help";
fi

if _cmds_is_registered "$CMD" && [[ $( _meta_command_get "$CMD" "env" ) == 'spip' ]]; then
    _spip_get_env;
fi;

if [[ -f "${cmd_file:=${SCRIPT_DIR}/cmd/$CMD.sh}" ]]; then
    # shellcheck source=/dev/null
    . "$cmd_file"
elif [[ "$CMD" == "help" ]]; then
    _help_print
else
    out_usage_error "Commande invalide : $CMD"
fi
